# extra Linked Lists practice problems similar to Lab07
# Generated by Claude 3.5
class Link:
    empty = ()

    def __init__(self, first, rest = empty):
        self.first = first
        self.rest = rest

    def __repr__(self):
        if self.rest is Link.empty:
            return f'Link({self.first})'
        return f'Link({self.first}, {self.rest})'


def alternate(s):
    """返回一个新链表,包含原链表的交替元素(0, 2, 4...位置的元素)

    >>> s = Link(1, Link(2, Link(3, Link(4))))
    >>> alternate(s)
    Link(1, Link(3))
    >>> s = Link(1, Link(2, Link(3)))
    >>> alternate(s)
    Link(1, Link(3))
    >>> s = Link(1)
    >>> alternate(s)
    Link(1)
    >>> alternate(Link.empty)
    ()
    """
    if s is Link.empty:
        return s
    elif s.rest is Link.empty:
        return Link(s.first)
    else:
        return Link(s.first, alternate(s.rest.rest))


def deep_map_mut(fn, s):
    """修改链表s,对每个元素应用函数fn。如果元素本身是链表,则递归处理

    >>> s = Link(1, Link(Link(2, Link(3)), Link(4)))
    >>> deep_map_mut(lambda x: x * x, s)
    >>> s
    Link(1, Link(Link(4, Link(9)), Link(16)))
    >>> s = Link(Link(1))
    >>> deep_map_mut(lambda x: x + 1, s)
    >>> s
    Link(Link(2))
    >>> s = Link(Link(Link(1)))
    >>> deep_map_mut(lambda x: x * x, s)
    >>> s
    Link(Link(Link(1)))
    """
    if s is Link.empty:
        return
    elif isinstance(s.first, Link):
        deep_map_mut(fn, s.first)
    else:
        s.first = fn(s.first)
    deep_map_mut(fn, s.rest)


def reverse_other(s):
    """每隔一层反转链表中的元素

    >>> s = Link(1, Link(2, Link(3, Link(4))))
    >>> reverse_other(s)
    >>> s
    Link(1, Link(4, Link(3, Link(2))))
    >>> s = Link(1, Link(2, Link(3)))
    >>> reverse_other(s)
    >>> s
    Link(1, Link(3, Link(2)))
    >>> s = Link(1)
    >>> reverse_other(s)
    >>> s
    Link(1)
    >>> s = Link(1, Link(2))
    >>> reverse_other(s)
    >>> s
    Link(1, Link(2))
    """
    second_elements = []
    curr = s.rest
    while curr is not Link.empty:
        second_elements.append(curr.first)
        curr = curr.rest.rest if curr.rest is not Link.empty else Link.empty

    curr = s.rest
    for element in reversed(second_elements):
        curr.first = element
        curr = curr.rest.rest if curr.rest is not Link.empty else Link.empty
